──────────────────────────────────────────────────────────────
                HARDWARE: TIMER-BASED INTERRUPTS
──────────────────────────────────────────────────────────────
     [TC0] (Timer Counter 0)                  [TC3] (Timer Counter 1)
     ↓                                        ↓
[ISR: TC0_Handler()]                     [ISR: TC3_Handler()]
   │                                           │
   │                                           │
   ├──> Reads one ADC sample                   ├──> Sends one DAC sample
   │                                           │
   │   if useBufferA == true:                  │   dacBuffer[dacIndex++]
   │       adcBufferA[adcIndex++] = value      │   if(dacIndex >= SAMPLES)
   │   else:                                   │       dacIndex = 0
   │       adcBufferB[adcIndex++] = value      │
   │                                           │
   ├──> if (adcIndex >= SAMPLES):              │
   │         adcBufferReady = true             │
   │         useBufferA = !useBufferA          │
   │         adcIndex = 0                      │
   │                                           │
   └───────────────────────────────────────────┘
──────────────────────────────────────────────────────────────
                  SOFTWARE: MAIN PROCESSING LOOP
──────────────────────────────────────────────────────────────
[loop()]
   │
   ├──> Wait until adcBufferReady == true
   │
   ├──> Determine which buffer is "full" (the inactive one):
   │         if useBufferA → process adcBufferB
   │         else → process adcBufferA
   │
   ├──> Copy samples → workingBuffer[]
   │
   ├──> Apply Windowing (e.g., Hanning)
   │
   ├──> Perform FFT → spectrum[]
   │
   ├──> Noise Reduction / Spectral Processing
   │
   ├──> Perform IFFT → outputBuffer[]
   │
   ├──> Overlap-Add (OLA) to smooth transitions
   │
   ├──> Find minVal, maxVal for dynamic scaling
   │         normalize to DAC range (0–4095)
   │
   ├──> Copy scaled samples → dacBuffer[]
   │
   ├──> noInterrupts();
   │        dacIndex = 0;            // prepare DAC playback
   │        adcBufferReady = false;  // reset flag
   │     interrupts();
   │
   └──> Repeat continuously
──────────────────────────────────────────────────────────────

